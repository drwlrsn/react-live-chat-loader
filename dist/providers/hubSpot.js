"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.domain = void 0;

var _waitForLoad = _interopRequireDefault(require("../utils/waitForLoad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const domain = 'js.hs-scripts.com';
exports.domain = domain;

const loadScript = hsId => {
  // Detect the provider is already loaded and return early
  console.debug({
    loadScript: window.HubSpotConversations
  });

  if (window.HubSpotConversations) {
    return false;
  }

  (function loadHubSpotSDK(d, s, id) {
    // fetch customerchat.js
    const fjs = d.getElementsByTagName(s)[0];

    if (d.getElementById(id)) {
      return;
    } //eslint-disable-next-line @typescript-eslint/no-explicit-any


    const js = d.createElement(s);
    js.id = id;
    js.src = `https://${domain}/${hsId}.js`;
    js.type = 'text/javascript';
    js.async = 1;
    js.defer = 1;

    if (fjs) {
      var _fjs$parentNode;

      (_fjs$parentNode = fjs.parentNode) === null || _fjs$parentNode === void 0 ? void 0 : _fjs$parentNode.insertBefore(js, fjs);
    } else {
      d.body.appendChild(js);
    }
  })(window.document, 'script', 'hs-script-loader');

  return true;
};

const load = ({
  providerKey,
  setState,
  beforeInit = () => undefined,
  onReady = () => undefined
}) => {
  window.hsConversationsOnReady = [() => {
    window.HubSpotConversations.widget.load();
    console.debug({
      hsConversationsOnReady: 'ready',
      widgetStatus: window.HubSpotConversations.widget.status()
    });
  }];
  const loaded = loadScript(providerKey);

  if (loaded) {
    beforeInit();
    (0, _waitForLoad.default)(() => {
      var _window$HubSpotConver;

      console.debug({
        waitForLoad: {
          HubSpotConversations: window.HubSpotConversations,
          widget: (_window$HubSpotConver = window.HubSpotConversations) === null || _window$HubSpotConver === void 0 ? void 0 : _window$HubSpotConver.widget
        }
      });
      return Boolean(window.HubSpotConversations && window.HubSpotConversations.widget && window.HubSpotConversations.widget.status().loaded);
    }, // Allow intercom to complete loading before removing fake widget
    () => {
      console.debug({
        loadComplete: window.HubSpotConversations,
        widgetStatus: window.HubSpotConversations.widget.status()
      });
      window.HubSpotConversations.widget.open();
      setState('complete');
      onReady();
      console.debug({
        widgetStatusAfterTimeout: window.HubSpotConversations.widget.status()
      });
    });
  }

  return loaded;
};

const open = () => {
  console.debug({
    open: 'called'
  });
  window.HubSpotConversations && window.HubSpotConversations.widget && !window.HubSpotConversations.widget.status().loaded && window.HubSpotConversations.widget.load();
  return window.HubSpotConversations && window.HubSpotConversations.widget && window.HubSpotConversations.widget.open();
}; // Open provider


const close = () => window.HubSpotConversations.widget.close(); // Close provider


var _default = {
  load,
  open,
  close,
  domain
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,